---
type Props = {
  title: string;
  description: string;
  code: string;
};

const { title, description, code } = Astro.props;

const codeSections = code.split("&").map((section) => {
  const [key, value] = section.split("=");
  return {
    key,
    value: key === "shape" ? JSON.stringify(JSON.parse(value), null, 2) : value,
  };
});
---

<example-item>
  <dt class="inline-block font-semibold text-white mt-6">
    {title}
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="inline h-5 w-5 text-indigo-500 hover:cursor-pointer"
      data-copyable
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5A3.375 3.375 0 0 0 6.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0 0 15 2.25h-1.5a2.251 2.251 0 0 0-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 0 0-9-9Z"
      ></path>
    </svg>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="inline h-5 w-5 text-indigo-500 hover:cursor-pointer"
      data-runable
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z"
      ></path>
    </svg>
  </dt>
  <dd>
    {description}
  </dd>
  <dd>
    <code class="hidden">{code}</code>
    <div class="inline-block">
      {
        codeSections.map(({ key, value }) => (
          <>
            <span>{key}:</span>
            <pre class="text-sm overflow-x-auto">{value}</pre>
          </>
        ))
      }
    </div>
  </dd>
</example-item>

<script>
  const baseCodeUrl = "https://test.serversent.events/?";

  class ExampleItem extends HTMLElement {
    constructor() {
      super();

      const copyButton = this.querySelector("[data-copyable]");
      const runButton = this.querySelector("[data-runable]");
      const exampleOutputHeader = document.querySelector("#example-header");
      const exampleOutput = document.querySelector("#example-message");

      const code = this.querySelector("code");
      const fullURL = baseCodeUrl + (code?.textContent || "");

      copyButton?.addEventListener("click", () => {
        navigator.clipboard.writeText(fullURL);
      });

      runButton?.addEventListener("click", () => {
        window.ACTIVE_EVENT_SOURCE?.close();

        if (exampleOutputHeader) {
          exampleOutputHeader.innerHTML = "&gt; waiting for first message...";
        }

        const evtSource = new EventSource(fullURL);
        window.ACTIVE_EVENT_SOURCE = evtSource;

        evtSource.onmessage = (message) => {
          if (exampleOutputHeader) {
            exampleOutputHeader.innerHTML = "&gt; streaming...";
          }

          if (!exampleOutput) return;

          exampleOutput.textContent = JSON.stringify(
            JSON.parse(message.data),
            null,
            2
          );
        };
      });
    }
  }

  customElements.define("example-item", ExampleItem);
</script>
