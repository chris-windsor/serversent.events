---
import ClipboardIcon from "../components/icons/Clipboard.astro";
import PlayIcon from "../components/icons/Play.astro";

type Props = {
  title: string;
  description: string;
  code: string;
};

const { title, description, code } = Astro.props;

const codeSections = code.split("&").map((section) => {
  const [key, value] = section.split("=");
  return {
    key,
    value: key === "shape" ? JSON.stringify(JSON.parse(value), null, 2) : value,
  };
});
---

<example-item>
  <dt class="inline-block font-semibold text-white mt-6">
    {title}
    <ClipboardIcon />
    <PlayIcon />
  </dt>
  <dd>
    {description}
  </dd>
  <dd>
    <code class="hidden">{code}</code>
    <div class="inline-block">
      {
        codeSections.map(({ key, value }) => (
          <>
            <span>{key}:</span>
            <pre class="text-sm overflow-x-auto">{value}</pre>
          </>
        ))
      }
    </div>
  </dd>
</example-item>

<script>
  const baseCodeUrl = "https://test.serversent.events/?";

  class ExampleItem extends HTMLElement {
    constructor() {
      super();

      const copyButton = this.querySelector("[data-copyable]");
      const runButton = this.querySelector("[data-runable]");
      const exampleOutputHeader = document.querySelector("#example-header");
      const exampleOutput = document.querySelector("#example-message");

      const code = this.querySelector("code");
      const fullURL = baseCodeUrl + (code?.textContent || "");

      copyButton?.addEventListener("click", () => {
        navigator.clipboard.writeText(fullURL);
      });

      runButton?.addEventListener("click", () => {
        window.ACTIVE_EVENT_SOURCE?.close();

        if (exampleOutputHeader) {
          exampleOutputHeader.innerHTML = "waiting for first message...";
        }

        const evtSource = new EventSource(fullURL);
        window.ACTIVE_EVENT_SOURCE = evtSource;

        evtSource.onmessage = (message) => {
          if (exampleOutputHeader) {
            exampleOutputHeader.innerHTML = "streaming...";
          }

          if (!exampleOutput) return;

          exampleOutput.textContent = JSON.stringify(
            JSON.parse(message.data),
            null,
            2
          );
        };
      });
    }
  }

  customElements.define("example-item", ExampleItem);
</script>
